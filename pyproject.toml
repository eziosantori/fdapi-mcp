[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fdapi-mcp-server"
version = "0.1.0"
description = "A Model Context Protocol server for FDAPI integration"
readme = "README.MD"
license = { text = "MIT" }
requires-python = ">=3.10"
authors = [{ name = "FDAPI MCP Team" }]
keywords = ["mcp", "model-context-protocol", "api", "fdapi", "ai", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastmcp>=2.0.0",
    "httpx>=0.27.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "structlog>=23.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "respx>=0.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "httpx>=0.27.0",
    "respx>=0.20.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

[project.urls]
Documentation = "https://github.com/your-org/fdapi-mcp-server#readme"
Issues = "https://github.com/your-org/fdapi-mcp-server/issues"
Source = "https://github.com/your-org/fdapi-mcp-server"

[project.scripts]
fdapi-mcp = "fdapi_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/fdapi_mcp"]

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["--strict-markers", "--strict-config", "--asyncio-mode=auto", "-ra"]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests that require network access",
    "slow: Tests that take a long time to run",
]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = ["*/tests/*", "*/venv/*", "*/.venv/*", "*/site-packages/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 100

[tool.coverage.html]
directory = "htmlcov"

# Black Configuration
[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fdapi_mcp"]
known_third_party = [
    "fastmcp",
    "httpx",
    "pydantic",
    "pytest",
    "structlog",
    "typer",
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy Configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = ["fastmcp.*"]
ignore_missing_imports = true

# Ruff Configuration (alternative to flake8)
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.ruff.isort]
known-first-party = ["fdapi_mcp"]

[tool.ruff.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

# Tool-specific configurations for development workflow
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "respx>=0.20.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]
